{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/call/call.component.ts","./src/app/call/call.component.html","./src/app/capabilities/capabilities.component.ts","./src/app/capabilities/capabilities.component.html","./src/app/contact-info/contact-info.component.ts","./src/app/contact-info/contact-info.component.html","./src/app/dashboard/dashboard.component.ts","./src/app/dashboard/dashboard.component.html","./src/app/display/display.component.ts","./src/app/display/display.component.html","./src/app/navbar/navbar.component.ts","./src/app/navbar/navbar.component.html","./src/app/network/network.component.ts","./src/app/network/network.component.html","./src/app/peripherals/peripherals.component.ts","./src/app/peripherals/peripherals.component.html","./src/app/system-time/system-time.component.ts","./src/app/system-time/system-time.component.html","./src/app/system-unit/system-unit.component.ts","./src/app/system-unit/system-unit.component.html","./src/app/xml.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'frontend';\n}\n","<navbar></navbar>\n\n<display></display>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n// import { AppRoutingModule } from './app-routing.module';\nimport {HttpClientModule} from '@angular/common/http';\nimport {HttpModule} from '@angular/http';\n\nimport { AppComponent } from './app.component';\n\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { SystemUnitComponent } from './system-unit/system-unit.component';\nimport { PeripheralsComponent } from './peripherals/peripherals.component';\nimport { CallComponent } from './call/call.component';\nimport { NetworkComponent } from './network/network.component';\nimport { SystemTimeComponent } from './system-time/system-time.component';\nimport { ContactInfoComponent } from './contact-info/contact-info.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { DisplayComponent } from './display/display.component';\n\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { XmlService } from './xml.service';\nimport { CapabilitiesComponent } from './capabilities/capabilities.component';\n\n\nconst routes: Routes = [\n  {path: 'dashboard', component: DashboardComponent},\n  {path: 'display', component: DisplayComponent},\n  {path: ' ', redirectTo:  'dashboard', pathMatch: 'full'}\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SystemUnitComponent,\n    PeripheralsComponent,\n    CallComponent,\n    NetworkComponent,\n    SystemTimeComponent,\n    ContactInfoComponent,\n    DashboardComponent,\n    DisplayComponent,\n    NavbarComponent,\n    CapabilitiesComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    HttpModule,\n    // AppRoutingModule,\n    // Add line below:\n    BrowserAnimationsModule,\n    RouterModule.forRoot(routes)\n  ],\n  providers: [XmlService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Calls_S, XmlService } from './../xml.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'call',\n  templateUrl: './call.component.html',\n  styleUrls: ['./call.component.css']\n})\nexport class CallComponent implements OnInit {\n\n  callsInfo: Calls_S\n  constructor(service: XmlService) {\n    this.callsInfo = service.callsInfo;\n    \n   }\n\n  ngOnInit(): void {\n  }\n\n}\n","<!-- Collapsible menu -->\n<ul class=\"collapsible\">\n    <li>\n      <div class=\"collapsible-header\"><i class=\"material-icons\">call</i>Calls</div>\n        <div class=\"collapsible-body\">\n          \n\n<!-- Card Containing Ethernet -->\n<div class=\"row\">\n    <div class=\"col s12\">\n      <div class=\"card \">\n        <div class=\"card-content \">\n          <span class=\"card-title center\">Details</span>\n<!-- Call Details Table -->\n\n                <table>\n                    <thead>\n                        <tr>\n                            <th *ngFor=\"let header of callsInfo.callsHeaderOne\"\n                            >\n                            {{header}}\n                            </th>\n                        </tr>      \n                    </thead>\n\n                    <tbody>\n                        <tr >\n                        \n                        <td *ngFor=\"let data of callsInfo.callsOne\"\n                        > {{data}}\n                    </td>\n                       \n                        </tr> \n                    </tbody>\n                    <thead>\n                            <tr>\n                                <th *ngFor=\"let header of callsInfo.callsHeaderTwo\"\n                                >\n                                {{header}}\n                                </th>\n                            </tr>      \n                        </thead>\n                        <tbody>\n                                <tr >\n                                \n                                <td *ngFor=\"let data of callsInfo.callsTwo\"\n                                > {{data}}\n                            </td>\n                               \n                                </tr> \n                            </tbody>\n\n\n                </table>\n\n\n<!-- End of Call card divs -->\n        </div>\n      </div>\n    </div>\n  </div>\n\n","import { Component, OnInit } from '@angular/core';\nimport { XmlService, Capabililites_S } from '../xml.service';\n\n@Component({\n  selector: 'capabilities',\n  templateUrl: './capabilities.component.html',\n  styleUrls: ['./capabilities.component.css']\n})\nexport class CapabilitiesComponent implements OnInit {\n\n  capabilitiesInfo : Capabililites_S;\n  constructor(service: XmlService) { \n\n    this.capabilitiesInfo = service.capabilitiesInfo;\n   \n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<!-- Collapsible menu -->\n<ul class=\"collapsible\">\n        <li>\n          <div class=\"collapsible-header\"><i class=\"material-icons\">check_box</i>Capabilities</div>\n            <div class=\"collapsible-body\">\n              \n\n<!-- Card Containing Ethernet -->\n<div class=\"row\">\n        <div class=\"col s12\">\n          <div class=\"card \">\n            <div class=\"card-content \">\n              <span class=\"card-title center\">Conference</span>\n<!-- Conference Table -->\n\n                    <table>\n                        <thead>\n                            <tr>\n                                <th *ngFor=\"let header of capabilitiesInfo.conferenceHeader\"\n                                >{{header}}\n                            </th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            <tr >\n                            \n                            <td *ngFor=\"let data of capabilitiesInfo.conference\"\n                            > {{data}}\n                        </td>\n                           \n                            </tr> \n                        </tbody>\n                    </table>\n\n\n<!-- End of Conference card divs -->\n            </div>\n          </div>\n        </div>\n      </div>\n","import { Contact_S, XmlService } from './../xml.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'contact-info',\n  templateUrl: './contact-info.component.html',\n  styleUrls: ['./contact-info.component.css']\n})\nexport class ContactInfoComponent implements OnInit {\n\n  contactInfo: Contact_S;\n\n  constructor(service: XmlService) { \n    this.contactInfo = service.contactInfo;\n  \n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<!-- Collapsible menu -->\n<ul class=\"collapsible\">\n        <li>\n          <div class=\"collapsible-header\"><i class=\"material-icons\">contacts</i>Contact Us</div>\n            <div class=\"collapsible-body\">\n              \n\n<!-- Card Containing Contaact -->\n<div class=\"row\">\n        <div class=\"col s12\">\n          <div class=\"card \">\n            <div class=\"card-content \">\n              <span class=\"card-title center\">Contact Details</span>\n<!-- Contact Table -->\n\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name </th>\n                                <th>Number</th>\n                                <th>Email</th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            <tr >\n                                <td>{{contactInfo.name}}</td>\n                                <td>{{contactInfo.number}}</td>\n                                <td>{{contactInfo.email}}</td>\n                             </tr> \n                        </tbody>\n                    </table>\n\n\n<!-- End of Contact card divs -->\n            </div>\n          </div>\n        </div>\n      </div>\n\n","import { XmlService, Diagnostics_S } from './../xml.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  diagnosticInfo: Diagnostics_S\n\n  constructor(service: XmlService) { \n\n    this.diagnosticInfo = service.diagnosticInfo;\n    console.log(this.diagnosticInfo);\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","\n              \n<!-- Card Containing Ethernet -->\n<div class=\"row\">\n        <div class=\"col s12\">\n            <div class=\"container\">\n          <div class=\"card \">\n            <div class=\"card-content \">\n              <span class=\"card-title center\">Diagnostics Run {{diagnosticInfo.diaTime}}</span>\n<!-- ConnectedDevices Table -->\n\n                    <table>\n                        <thead>\n                            <tr>\n                               <th>Level</th>\n                               <th>Description</th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            <!-- <tr *ngFor=\"let row of peripheralsInfo.connectedDevice\"\n                            > -->\n                            <!-- <td *ngFor=\"let data of row\"\n                            >\n                                {{data}}\n                            </td> -->\n                            <!-- </tr>  -->\n                        </tbody>\n                    </table>\n\n\n<!-- End of Ethernet card divs -->\n            </div>\n          </div>\n        </div>\n        </div>\n      </div>\n\n\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'display',\n  templateUrl: './display.component.html',\n  styleUrls: ['./display.component.css']\n})\nexport class DisplayComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<dashboard></dashboard>\n<br>\n<br>\n<br>\n<br>\n<system-time></system-time>\n<network></network>\n<peripherals></peripherals>\n<capabilities></capabilities>\n<call></call>\n<contact-info></contact-info>","import { Component, OnInit } from '@angular/core';\nimport { Time_S, XmlService } from './../xml.service';\n\n@Component({\n  selector: 'navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  timeInfo : Time_S;\n\n  constructor(service: XmlService) { \n    this.timeInfo = service.timeInfo;\n   \n  }\n  ngOnInit(): void {\n  }\n\n}\n","<nav>\n        <div class=\"nav-wrapper #f3e5f5\">\n          <a  class=\"brand-logo center \">Welcome User</a>\n          \n        \n               \n          \n           \n            <!-- <li><a href=\"badges.html\">Components</a></li>\n            <li class=\"active\"><a href=\"collapsible.html\">JavaScript</a></li> -->\n       \n        </div>\n      </nav>","import { Component, OnInit } from '@angular/core';\nimport { XmlService, Network_S } from '../xml.service';\n\n\n\n@Component({\n  selector: 'network',\n  templateUrl: './network.component.html',\n  styleUrls: ['./network.component.css']\n})\nexport class NetworkComponent implements OnInit {\n\n  networkInfo : Network_S;\n  \n\n  constructor( private service: XmlService) { \n\n    this.networkInfo = service.networkInfo;\n\n\n\n    // constructor (http: Http){\n  // this.service.getXml()\n  //  .subscribe(response => {\n   \n  // console.log(Object.values(response.json().Status.Network[0].Ethernet[0]));\n  // this.network = Object.values(response.json().Status.Network[0].Ethernet[0]);\n \n  //  })\n  //  console.log(this.network);\n}\n\n\n\n\n  ngOnInit() {\n      // this.service.getNetwork()\n      // .subscribe(response => {\n      //   this.network = response.json();\n      // })\n\n      // console.log(this.network);\n    }\n  \n\n}\n","<!-- Collapsible menu -->\n<ul class=\"collapsible\">\n        <li>\n          <div class=\"collapsible-header\"><i class=\"material-icons\">filter_drama</i>Network</div>\n            <div class=\"collapsible-body\">\n              \n\n<!-- Card Containing Ethernet -->\n<div class=\"row\">\n        <div class=\"col s12\">\n          <div class=\"card \">\n            <div class=\"card-content \">\n              <span class=\"card-title center\">Ethernet</span>\n<!-- Ethernet Table -->\n\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>MacAddress</th>\n                                <th>Speed</th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            <tr>\n                                <td *ngFor=\"let item of networkInfo.ethernet\">\n                                {{item}}\n                                </td>\n                            </tr> \n                        </tbody>\n                    </table>\n\n\n<!-- End of Ethernet card divs -->\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Card Containing iPv4/iPv6 -->\n<div class=\"row\">\n        <div class=\"col s12\">\n          <div class=\"card \">\n            <div class=\"card-content \">\n              <span class=\"card-title center\">iPv4/iPv6</span>\n<!-- iPv4/iPv6 -->\n\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Address</th>\n                                <th>Gateway</th>\n                                <th>SubnetMask</th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            <tr>\n                                <td>iPv4</td>\n                                <td *ngFor=\"let item of networkInfo.iPv4\">\n                                {{item}}\n                                </td>\n                            </tr> \n                        </tbody>\n                    </table>\n\n\n<!-- End of iPv4/iPv6 card divs -->\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n\n<!-- End of collapsible menu -->\n            </div>\n        </li>\n\n\n\n\n\n\n\n\n","import { Component, OnInit } from '@angular/core';\nimport { XmlService, Peripherals_S } from '../xml.service';\n\n@Component({\n  selector: 'peripherals',\n  templateUrl: './peripherals.component.html',\n  styleUrls: ['./peripherals.component.css']\n})\nexport class PeripheralsComponent implements OnInit {\n\n  peripheralsInfo : Peripherals_S;\n\n  constructor(service: XmlService) { \n\n    this.peripheralsInfo = service.peripheralsInfo;\n   \n  }\n\n  ngOnInit(): void {\n  }\n\n}\n\n\n","<!-- Collapsible menu -->\n<ul class=\"collapsible\">\n        <li>\n          <div class=\"collapsible-header\"><i class=\"material-icons\">camera_alt</i>Peripherals</div>\n            <div class=\"collapsible-body\">\n              \n\n<!-- Card Containing Ethernet -->\n<div class=\"row\">\n        <div class=\"col s12\">\n          <div class=\"card \">\n            <div class=\"card-content \">\n              <span class=\"card-title center\">Connected Devices</span>\n<!-- ConnectedDevices Table -->\n\n                    <table>\n                        <thead>\n                            <tr>\n                                <th *ngFor=\"let header of peripheralsInfo.connectedDeviceHeader\"\n                                >{{header}}\n                            </th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            <tr *ngFor=\"let row of peripheralsInfo.connectedDevice\"\n                            >\n                            <td *ngFor=\"let data of row\"\n                            >\n                                {{data}}\n                            </td>\n                            </tr> \n                        </tbody>\n                    </table>\n\n\n<!-- End of Ethernet card divs -->\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Card Containing Camera-->\n<div class=\"row\">\n        <div class=\"col s12\">\n          <div class=\"card \">\n            <div class=\"card-content \">\n              <span class=\"card-title center\">Connected Cameras</span>\n<!-- Connected Cameras table-->\n\n                    <table>\n                        <thead>\n                                <th *ngFor=\"let header of peripheralsInfo.connectedCameraHeader\"\n                                >{{header}}\n                            </th>\n                        </thead>\n\n                        <tbody>\n                                <tr *ngFor=\"let row of peripheralsInfo.connectedCamera\"\n                                >\n                                <td *ngFor=\"let data of row\"\n                                >\n                                    {{data}}\n                                </td>\n                        </tbody>\n                    </table>\n\n\n<!-- End of iPv4/iPv6 card divs -->\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n\n<!-- End of collapsible menu -->\n            </div>\n        </li>\n\n\n\n\n\n\n\n\n\n","import { Time_S, XmlService } from './../xml.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'system-time',\n  templateUrl: './system-time.component.html',\n  styleUrls: ['./system-time.component.css']\n})\nexport class SystemTimeComponent implements OnInit {\n\ntimeInfo : Time_S;\n\n  constructor(service: XmlService) { \n    this.timeInfo = service.timeInfo;\n    console.log(this.timeInfo);\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"center-align\">\n<h6>System Time: {{timeInfo.time}}</h6>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-system-unit',\n  templateUrl: './system-unit.component.html',\n  styleUrls: ['./system-unit.component.css']\n})\nexport class SystemUnitComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>system-unit works!</p>\n","import { Injectable } from '@angular/core';\nimport {Http} from '@angular/http';\nimport {interval} from 'rxjs';\n\n//Network variables binding \nexport interface Network_S{\n  ethernet : string[];\n  iPv4: string[];\n  iPv6: string[];\n}\n\n//Peripherals variables binding\nexport interface Peripherals_S{\n  connectedDevice : any[];\n  connectedDeviceHeader : any[];\n  connectedCameraHeader: any[];\n  connectedCamera: any[];\n}\n\n//Capabilities Binding\nexport interface Capabililites_S{\n  conference : any[];\n  conferenceHeader : any[];\n}\n\n//Calls Binding\nexport interface Calls_S{\n  callsOne : any[];\n  callsTwo: any[];\n  callsHeaderOne : any[];\n  callsHeaderTwo : any[];\n}\n\n//Contacts Binding\nexport interface Contact_S{\n  name : string[];\n  email: string[];\n  number : string[];\n}\n\n//SystemTime Binding\nexport interface Time_S{\n  time : string;\n}\n\n//Diagnostics Time Binding\nexport interface Diagnostics_S{\n  diaTime : string;\n  diagnostics: any[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class XmlService {\n\n  private url = 'http://localhost:3000/xml';\n\n  public networkInfo: Network_S = {ethernet : [], iPv4: [], iPv6:[] };\n  public peripheralsInfo: Peripherals_S = {connectedDevice: [], connectedDeviceHeader: [], connectedCameraHeader: [], connectedCamera: []};\n  public capabilitiesInfo: Capabililites_S = {conference:[], conferenceHeader: []};\n  public callsInfo: Calls_S = {callsOne:[], callsTwo:[], callsHeaderOne:[], callsHeaderTwo:[]};\n  public contactInfo: Contact_S = {name: [], email: [], number: []};\n  public timeInfo: Time_S = {time: \"\"};\n  public diagnosticInfo: Diagnostics_S = {diaTime: \"\", diagnostics: []};\n  //function to take response, replace $ with \"Item\" as that seems to be the relevant info. (maxOccurance 'n' I'm assuming is not what the user needs?)\n  replace$(headerArr){\n    headerArr[0] = \"Item\";\n    return headerArr;\n  };\n\n//function to get values from each object in array with item value being the first one\n  getValuesFromObjArray(ObjArr){\n\n    let formattedArr = ObjArr.map((v) => {\n      let idealArr = Object.values(v);\n      idealArr[0] = Object.values(idealArr[0])[0];\n      return idealArr;\n    })\n \n    return formattedArr\n   }\n\n   //Camera obj Arr as it's different\n   getValuesFromObjArrayCamera(ObjArr){\n\n    let formattedArr = ObjArr.map((v) => {\n      let idealArr = Object.values(v);\n      idealArr[0] = Object.values(idealArr[0])[0];\n      idealArr[1] = Object.values((idealArr[1])[0])[0];\n      return idealArr;\n    })\n //only cameras with value of \"True\" are returned\n    return formattedArr.filter((arr) => {\n      return arr[2] == \"True\";\n    });\n   }\n\n    //Call obj Arr as it's different\n    getValuesFromObjArrayCall(ObjArr){\n\n      \n        let idealArr = Object.values(ObjArr);\n        idealArr[0] = Object.values(idealArr[0])[0];\n        idealArr[8] = Object.values((idealArr[8])[0])[0];\n       \n        return idealArr[15] == \"Connected\" ? idealArr : [\"NotConnected\"];\n    \n  \n     }\n  \n\n  //function that runs the http request for xml file\n  getXml() {\n    this.http.get(this.url)\n    .subscribe(response => {\n\n\n     //Network items: Ethernet, IPv4, and IPv6 \n    this.networkInfo.ethernet = Object.values(response.json().Status.Network[0].Ethernet[0]);\n    this.networkInfo.iPv4 = Object.values(response.json().Status.Network[0].IPv4[0]);\n    this.networkInfo.iPv6 = Object.values(response.json().Status.Network[0].IPv6[0]);\n    \n    //Peripheral Items: ConnectedDevice & Cameras\n    this.peripheralsInfo.connectedDevice = this.getValuesFromObjArray(Object.values(response.json().Status.Peripherals[0].ConnectedDevice));\n    this.peripheralsInfo.connectedDeviceHeader = this.replace$(Object.keys(response.json().Status.Peripherals[0].ConnectedDevice[0]));\n    this.peripheralsInfo.connectedCameraHeader = this.replace$(Object.keys(response.json().Status.Cameras[0].Camera[0]));\n    this.peripheralsInfo.connectedCamera = this.getValuesFromObjArrayCamera(Object.values(response.json().Status.Cameras[0].Camera));\n\n    //Capabilities item: Conference\n    this.capabilitiesInfo.conferenceHeader = Object.keys(response.json().Status.Capabilities[0].Conference[0]);\n    this.capabilitiesInfo.conference = Object.values(response.json().Status.Capabilities[0].Conference[0]);\n\n    //Calls item: Details\n    this.callsInfo.callsHeaderOne = this.replace$(Object.keys(response.json().Status.Call[0])).splice(0,9);\n    this.callsInfo.callsHeaderTwo = this.replace$(Object.keys(response.json().Status.Call[0])).splice(9);\n    this.callsInfo.callsOne = this.getValuesFromObjArrayCall(Object.values(response.json().Status.Call[0])).splice(0,9);\n    this.callsInfo.callsTwo = this.getValuesFromObjArrayCall(Object.values(response.json().Status.Call[0])).splice(9);\n  \n    //Contact item: Details\n   this.contactInfo.email = response.json().Status.UserInterface[0].ContactInfo[0].ContactMethod[0].Number;\n   this.contactInfo.number = response.json().Status.UserInterface[0].ContactInfo[0].ContactMethod[1].Number;\n   this.contactInfo.name = response.json().Status.UserInterface[0].ContactInfo[0].Name;\n  \n   //Contact item: Details\n  let dateFormatted = new Date(response.json().Status.Time[0].SystemTime.toString())\n  this.timeInfo.time = dateFormatted.toString();\n\n  //Contact item: Details\n  let diagDateFormatted = new Date(response.json().Status.SystemUnit[0].Diagnostics[0].LastRun[0]._.toString())\n  this.diagnosticInfo.diaTime = diagDateFormatted.toString();\n  this.diagnosticInfo.diagnostics = response.json().Status.SystemUnit[0];\n  });\n\n    \n  }\n\n  \n  constructor(private http: Http) { \n// this.service.getXml()\n  //  .subscribe(response => {\n   \n  // console.log(Object.values(response.json().Status.Network[0].Ethernet[0]));\n  // this.network = Object.values(response.json().Status.Network[0].Ethernet[0]);\n \n this.getXml();\n\n  interval(60000).subscribe(x => { // will execute every 30 seconds\n    this.getXml();\n   \n  });\n\n \n  }\n  }\n\n  \n    // return this.http.get(this.url);\n    // this.test.ethernet = [\"x\", \"x\"];\n\n\n  \n\n  \n\n\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}